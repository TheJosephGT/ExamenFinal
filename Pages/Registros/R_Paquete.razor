@page "/paquete"
@page "/paquete/{paqueteId:int}"

<PageTitle>Paquete</PageTitle>

@inject PaqueteBLL paqueteBLL
@inject ProductosBLL productoBLL
@inject NotificationService notify

<EditForm Model="paquete" OnInvalidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h1> Registo de paquete</h1>
        </div>

        <div class="card-body">
            @*PaqueteId*@
            <div class="input-group">
                <InputNumber @bind-Value="paquete.PaqueteId" class="form-control" />
                <button type="button" class="btn btn-primary" @onclick="Buscar"><span class="oi oi-magnifying-glass"></span></button>
            </div>

            @*Fecha*@
            <div class="form-group">
                <label>Fecha: </label><br>
                <InputDate @bind-Value="paquete.Fecha" class="form-control" />
                <ValidationMessage For="@(() => paquete.Fecha)" />
            </div>

            @*Concepto*@
            <div class="form-group">
                <label>Concepto: </label><br>
                <InputText @bind-Value="paquete.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => paquete.Descripcion)" />
            </div>

            @*--- Pago detalle ---*@
            <div class="card">
                <div class="card-header">
                    <h1>Detalle</h1>
                </div>

                @*ProductoId*@
                <div class="form-group">
                    <label>Producto: </label><br>
                    <InputSelect class="form-select" @bind-Value="detalle.ProductoId">
                        @foreach (Productos item in productoBLL.GetList(o => true))

                        {
                            <option value="@item.ProductoId">@item.Descripcion</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => paquete.ProductoId)" />
                </div>

                @*Cantidad*@
                <div class="form-group">
                    <label>Cantidad: </label><br>
                    <InputNumber @bind-Value="detalle.CantidadPaquete" class="form-control" />
                    <ValidationMessage For="@(() => detalle.CantidadPaquete)" />
                </div>

                @*Boton*@
                <div class="card-footer">
                    <div class="form-group text-center" display: inline-block>
                        <button type="button" class="btn btn-lg btn-primary" @onclick="AgregarDetalle"><i
                                class="oi oi-file" /> Agregar </button>
                    </div>
                </div>

                @*Tabla*@
                <div class="container">
                    <table class="table table-hover">
                        <thead class="thead-dark">
                            <tr>
                                <th>ProductoId</th>
                                <th>Descripci√≥n</th>
                                <th>CantidadPaquetes</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in paquete.DetallePaquetes)
                            {
                                <tr>
                                    <td>@item.ProductoId</td>
                                    <td>@productoBLL.Buscar(item.ProductoId).Descripcion</td>
                                    <td>@item.CantidadPaquete</td>
                                    <td> <button class="btn btn-danger mr-2" onclick=@(() =>
                                        EliminarDetalle(item.DetallePaqueteId))>
                                            <i class="oi oi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <label>Total: @total</label>
            </div>

            @*--- Producido ---*@
            <div class="card">
                <div class="card-header">
                    <h1>Producido</h1>
                </div>

                @*ProductoId*@
                <div class="form-group">
                    <label>Producto: </label><br>
                    <InputSelect class="form-select" @bind-Value="paquete.ProductoId">
                        @foreach (Productos item in productoBLL.GetList(o => true).Where(o => o.ProductoId == 6))
                        {
                            <option value="@item.ProductoId">@item.Descripcion</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => paquete.ProductoId)" />
                </div>

                @*Producido*@
                <div class="form-group">
                    <label>Cantidad: </label><br>
                    <InputNumber @bind-Value="paquete.Cantidad" class="form-control" />
                    <ValidationMessage For="@(() => paquete.Cantidad)" />
                </div>
            </div>

        </div>
        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><i class="oi oi-file" /> Nuevo
                </button>
                <button type="submit" class="btn btn-lg btn-success" @onclick="Guardar"><i class="oi oi-document" /> Guardar </button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><i class="oi oi-trash" />
                    Eliminar </button>
            </div>
        </div>
    </div>


</EditForm>

@code {
    [Parameter]

    public int PaqueteId { get; set; }
    public Paquete paquete { get; set; } = new Paquete();
    public Productos producto { get; set; } = new Productos();
    public DetallePaquetes detalle { get; set; } = new DetallePaquetes();
    public int total = 0;

    protected override void OnInitialized()
    {
        if (PaqueteId > 0)
        {
            this.paquete.PaqueteId = PaqueteId;
            this.Buscar();
        }
    }

    public void Nuevo()
    {
        paquete = new Paquete();
    }

    bool Validar()
    {
        if (!String.IsNullOrEmpty(paquete.Descripcion))
        {
            return true;
        }
        return false;
    }

    void Guardar()
    {
        if (!Validar()) { return; }

        if (paqueteBLL.Guardar(this.paquete) && paquete.Cantidad > 0)
        {
            notify.ShowNotification("Se ha guardado correctamente", NotificationSeverity.Success);
            this.Nuevo();
        }else
        {
            notify.ShowNotification("Debes llenar el producido y el detalle", NotificationSeverity.Error);
        }
    }

    private void Buscar()
    {
        if (paquete.PaqueteId > 0)
        {
            var encontrado = paqueteBLL.Buscar(paquete.PaqueteId);
            if (encontrado != null)
                this.paquete = encontrado;
        }
    }

    public void Eliminar()
    {
        if (paquete.PaqueteId > 0)
        {
            if (paqueteBLL.Eliminar(paquete.PaqueteId))
            {
                notify.ShowNotification("Se ha eliminado correctamente", NotificationSeverity.Error);
                Nuevo();
            }
        }
        else
        {
            notify.ShowNotification("No hay nada que eliminar", NotificationSeverity.Error);
            return;
        }
    }
    void AgregarDetalle()
    {
        if (detalle.CantidadPaquete > 0 && detalle?.ProductoId != null)
        {
            var producto = productoBLL.Buscar(detalle.ProductoId);
            if (detalle.CantidadPaquete <= producto?.Existencia)
            {
                this.paquete.DetallePaquetes.Add(this.detalle);
                total += detalle.CantidadPaquete;
                this.detalle = new DetallePaquetes();
            }
            else
            {
                notify.ShowNotification("La cantidad solicitada excede la existencia", NotificationSeverity.Error);
            }
        }
    }

    void EliminarDetalle(int detalleId)
    {
        if (paquete.DetallePaquetes != null && detalleId > 0)
        {
            paquete.DetallePaquetes.RemoveAll(o => o.DetallePaqueteId == detalleId);
            notify.ShowNotification("El detalle se ha eliminado correctamente", NotificationSeverity.Info);
        }
    }
}